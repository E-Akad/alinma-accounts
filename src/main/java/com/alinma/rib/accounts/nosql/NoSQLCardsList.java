package com.alinma.rib.accounts.nosql;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alinma.rib.accounts.cache.model.CardModel;
import com.alinma.rib.config.OracleNoSQLStoreConstants;
import com.alinma.rib.models.business.common.Model500InternalServererror;
import com.alinma.rib.models.system.common.enums.FuncIdEnum;
import com.alinma.rib.nosql.OracleNoSQLStore;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.Getter;
import lombok.Setter;
import oracle.kv.StatementResult;
import oracle.kv.query.BoundStatement;
import oracle.kv.query.PreparedStatement;
import oracle.kv.table.FieldValueFactory;
import oracle.kv.table.PrimaryKey;
import oracle.kv.table.RecordValue;
import oracle.kv.table.Row;
import oracle.kv.table.Table;
import oracle.kv.table.TableAPI;
import oracle.kv.table.TableIterator;

@Service
public class NoSQLCardsList {

	private static final Logger LOGGER = LoggerFactory.getLogger(NoSQLCardsList.class);

	@Autowired
	@Getter
	@Setter
	private OracleNoSQLStore oracleStore;

	public void insertOrUpdateCards(List<CardModel> cardModels, String userCifNumber, String funcId, String lnkdAcctNum, String cardType) throws Model500InternalServererror, JsonProcessingException {
		LOGGER.debug("CardModels to be inserted --=-=-- " + cardModels.size());
		TableAPI tableAPI;
		Table cardTable;

		tableAPI = oracleStore.getKvStore().getTableAPI();
		cardTable = tableAPI.getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME);
		/**
		 * Create table if it doesn't exist
		 */
		if (cardTable == null) {
			String tableCreation = "CREATE TABLE IF NOT EXISTS " + OracleNoSQLStoreConstants.CARD_TABLE_NAME + " (card_index INTEGER GENERATED BY DEFAULT AS IDENTITY, cif STRING, func_id STRING, lnkd_acct_num STRING, card_type STRING, info JSON, PRIMARY KEY(card_index))";

			oracleStore.getKvStore().executeSync(tableCreation);
			cardTable = tableAPI.getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME);
		}

		for (CardModel cardModel : cardModels) {
			Row row = cardTable.createRow();

			/**
			 * Add this to update the card in case it exists
			 */
			if (cardModel.getCardIndex() != null) {
				row.put("card_index", cardModel.getCardIndex());
			}
			row.put("cif", userCifNumber);
			row.put("func_id", funcId != null ? funcId : FuncIdEnum.getCardsLightInquiry.getValue());
			if (lnkdAcctNum != null) {
				row.put("lnkd_acct_num", lnkdAcctNum);
			}
			if (cardType != null) {
				row.put("card_type", cardType);
			}
			if (cardModel.getCardNumber() != null) {
				String cardModelJson = new ObjectMapper().writeValueAsString(cardModel);
				row.putJson("info", cardModelJson);
			}
			tableAPI.put(row, null, null);
		}
	}

	public void updateCard(CardModel cardModel) throws Model500InternalServererror, JsonProcessingException {
		TableAPI tableAPI;
		Table cardTable;

		tableAPI = oracleStore.getKvStore().getTableAPI();
		cardTable = tableAPI.getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME);
		/**
		 * Create table if it doesn't exist
		 */
		if (cardTable == null) {
			String tableCreation = "CREATE TABLE IF NOT EXISTS " + OracleNoSQLStoreConstants.CARD_TABLE_NAME + " (card_index INTEGER GENERATED BY DEFAULT AS IDENTITY, cif STRING, func_id STRING, lnkd_acct_num STRING, card_type STRING, info JSON, PRIMARY KEY(card_index))";

			oracleStore.getKvStore().executeSync(tableCreation);
			cardTable = tableAPI.getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME);
		}

		Row row = cardTable.createRow();

		/**
		 * Add this to update the card in case it exists
		 */
		if (cardModel.getCardIndex() != null) {
			row.put("card_index", cardModel.getCardIndex());
		}
		if (cardModel.getCif() != null) {
			row.put("cif", cardModel.getCif());
		}
		if (cardModel.getEsbFuncId() != null) {
			row.put("func_id", cardModel.getEsbFuncId());
		}
		if (cardModel.getEsbLnkdAcctNum() != null) {
			row.put("lnkd_acct_num", cardModel.getEsbLnkdAcctNum());
		}
		if (cardModel.getEsbCardType() != null) {
			row.put("card_type", cardModel.getEsbCardType());
		}
		if (cardModel.getCardNumber() != null) {
			String cardModelJson = new ObjectMapper().writeValueAsString(cardModel);
			row.putJson("info", cardModelJson);
		}
		tableAPI.put(row, null, null);
	}

	public List<CardModel> getCards(String userCifNumber, String funcId, String lnkdAcctNum, String cardType) throws Model500InternalServererror, JsonParseException, JsonMappingException, IOException {
		checkNewCardTable();
		StatementResult result;
		if (oracleStore.getKvStore().getTableAPI().getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME) == null) {
			return null;
		}

		StringBuffer declarationPart = new StringBuffer("DECLARE $cif string; $func_id string; ");
		StringBuffer selectionPart = new StringBuffer(" SELECT * from card WHERE cif = $cif AND func_id = $func_id ");

		if (lnkdAcctNum != null) {
			declarationPart.append(" $lnkd_acct_num string; ");
			selectionPart.append(" AND lnkd_acct_num = $lnkd_acct_num ");
		} else {
			selectionPart.append(" AND lnkd_acct_num IS NULL ");
		}
		if (cardType != null) {
			declarationPart.append(" $card_type string; ");
			selectionPart.append(" AND card_type = $card_type ");
		} else {
			selectionPart.append(" AND card_type IS NULL ");
		}

		selectionPart.append(" ORDER BY card_index asc ");

		PreparedStatement pStmt = oracleStore.getKvStore().prepare(declarationPart.toString() + selectionPart.toString());
		BoundStatement bStmt = pStmt.createBoundStatement();
		bStmt.setVariable(OracleNoSQLStoreConstants.CIF_VARIABLE, userCifNumber);
		bStmt.setVariable("$func_id", funcId != null ? funcId : FuncIdEnum.getCardsLightInquiry.getValue());
		if (lnkdAcctNum != null) {
			bStmt.setVariable("$lnkd_acct_num", lnkdAcctNum);
		}
		if (cardType != null) {
			bStmt.setVariable("$card_type", cardType);
		}
		result = oracleStore.getKvStore().executeSync(bStmt);
		TableIterator<RecordValue> iterator = result.iterator();

		List<CardModel> cardsModels = new ArrayList<CardModel>();
		while (iterator.hasNext()) {
			RecordValue value = iterator.next();

			CardModel cardModel = new CardModel();

			if (!value.get("info").isNull()) {
				String cardModelJson = value.get("info").asMap().toString();
				cardModel = new ObjectMapper().readValue(cardModelJson, CardModel.class);
			}
			if (!value.get("card_index").isNull()) {
				cardModel.setCardIndex(value.get("card_index").asInteger().get());
			}
			if (!value.get("cif").isNull()) {
				cardModel.setCif(value.get("cif").asString().get());
			}
			if (!value.get("func_id").isNull()) {
				cardModel.setEsbFuncId(value.get("func_id").asString().get());
			}
			if (!value.get("lnkd_acct_num").isNull()) {
				cardModel.setEsbLnkdAcctNum(value.get("lnkd_acct_num").asString().get());
			}
			if (!value.get("card_type").isNull()) {
				cardModel.setEsbCardType(value.get("card_type").asString().get());
			}
			cardsModels.add(cardModel);
		}
		return cardsModels;
	}

	public CardModel getCard(BigDecimal cardIndex) throws Model500InternalServererror, JsonParseException, JsonMappingException, IOException {
		checkNewCardTable();
		CardModel cardModel = null;
		StatementResult result;
		if (oracleStore.getKvStore().getTableAPI().getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME) == null) {
			return null;
		}
		PreparedStatement prepStmt = oracleStore.getKvStore().prepare(OracleNoSQLStoreConstants.GET_CARD_BY_CARD_INDEX);
		BoundStatement boundStmt = prepStmt.createBoundStatement();
		boundStmt.setVariable(OracleNoSQLStoreConstants.CARD_INDEX_VARIABLE, FieldValueFactory.createNumber(cardIndex));
		result = oracleStore.getKvStore().executeSync(boundStmt);
		TableIterator<RecordValue> iterator = result.iterator();

		if (iterator.hasNext()) {
			cardModel = new CardModel();
			RecordValue value = iterator.next();

			if (!value.get("info").isNull()) {
				String cardModelJson = value.get("info").asMap().toString();
				cardModel = new ObjectMapper().readValue(cardModelJson, CardModel.class);
			}
			if (!value.get("card_index").isNull()) {
				cardModel.setCardIndex(value.get("card_index").asInteger().get());
			}
			if (!value.get("cif").isNull()) {
				cardModel.setCif(value.get("cif").asString().get());
			}
			if (!value.get("func_id").isNull()) {
				cardModel.setEsbFuncId(value.get("func_id").asString().get());
			}
			if (!value.get("lnkd_acct_num").isNull()) {
				cardModel.setEsbLnkdAcctNum(value.get("lnkd_acct_num").asString().get());
			}
			if (!value.get("card_type").isNull()) {
				cardModel.setEsbCardType(value.get("card_type").asString().get());
			}
		}
		return cardModel;
	}

	public void deleteAllCardsList(String userCifNumber) throws Model500InternalServererror, JsonParseException, JsonMappingException, IOException {
		TableAPI tableAPI;
		tableAPI = oracleStore.getKvStore().getTableAPI();
		Table myTable = tableAPI.getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME);

		PrimaryKey primaryKey = myTable.createPrimaryKey();

		List<CardModel> cardsList = getCards(userCifNumber, null, null, null);
		LOGGER.debug("All Cards size : " + cardsList.size());
		for (CardModel cardsModel : cardsList) {
			primaryKey.put("card_index", cardsModel.getCardIndex());
			primaryKey.put("cif", cardsModel.getCif());
			tableAPI.multiDelete(primaryKey, null, null);
		}
	}

	private void checkNewCardTable() throws Model500InternalServererror {
		TableAPI tableAPI;
		Table cardTable;

		tableAPI = oracleStore.getKvStore().getTableAPI();
		cardTable = tableAPI.getTable(OracleNoSQLStoreConstants.CARD_TABLE_NAME);
		/**
		 * Create table if it doesn't exist
		 */
		if (cardTable != null) {
			if (cardTable.getField("func_id") == null) {
				String tableDrop = "drop table " + OracleNoSQLStoreConstants.CARD_TABLE_NAME;
				oracleStore.getKvStore().executeSync(tableDrop);
			}
		}
	}
}
